[{"name":"BLACK","description":"trees.redblack.Colors.BLACK","location":"trees-6/trees.redblack/-colors/-b-l-a-c-k/index.html","searchKeys":["BLACK","BLACK","trees.redblack.Colors.BLACK"]},{"name":"RED","description":"trees.redblack.Colors.RED","location":"trees-6/trees.redblack/-colors/-r-e-d/index.html","searchKeys":["RED","RED","trees.redblack.Colors.RED"]},{"name":"abstract class AbstractTree<K : Comparable<K>, V, N : Node<K, V, N>> : Tree<K, V, N> ","description":"trees.base.AbstractTree","location":"trees-6/trees.base/-abstract-tree/index.html","searchKeys":["AbstractTree","abstract class AbstractTree<K : Comparable<K>, V, N : Node<K, V, N>> : Tree<K, V, N> ","trees.base.AbstractTree"]},{"name":"abstract fun clear()","description":"trees.base.Tree.clear","location":"trees-6/trees.base/-tree/clear.html","searchKeys":["clear","abstract fun clear()","trees.base.Tree.clear"]},{"name":"abstract fun delete(key: K): Boolean","description":"trees.base.Tree.delete","location":"trees-6/trees.base/-tree/delete.html","searchKeys":["delete","abstract fun delete(key: K): Boolean","trees.base.Tree.delete"]},{"name":"abstract fun inOrder(): List<Node<K, V, N>>","description":"trees.base.Tree.inOrder","location":"trees-6/trees.base/-tree/in-order.html","searchKeys":["inOrder","abstract fun inOrder(): List<Node<K, V, N>>","trees.base.Tree.inOrder"]},{"name":"abstract fun insert(key: K, value: V): N","description":"trees.base.Tree.insert","location":"trees-6/trees.base/-tree/insert.html","searchKeys":["insert","abstract fun insert(key: K, value: V): N","trees.base.Tree.insert"]},{"name":"abstract fun isEmpty(): Boolean","description":"trees.base.Tree.isEmpty","location":"trees-6/trees.base/-tree/is-empty.html","searchKeys":["isEmpty","abstract fun isEmpty(): Boolean","trees.base.Tree.isEmpty"]},{"name":"abstract fun search(key: K): V?","description":"trees.base.Tree.search","location":"trees-6/trees.base/-tree/search.html","searchKeys":["search","abstract fun search(key: K): V?","trees.base.Tree.search"]},{"name":"abstract fun size(): Int","description":"trees.base.Tree.size","location":"trees-6/trees.base/-tree/size.html","searchKeys":["size","abstract fun size(): Int","trees.base.Tree.size"]},{"name":"abstract override fun delete(key: K): Boolean","description":"trees.base.AbstractTree.delete","location":"trees-6/trees.base/-abstract-tree/delete.html","searchKeys":["delete","abstract override fun delete(key: K): Boolean","trees.base.AbstractTree.delete"]},{"name":"abstract override fun insert(key: K, value: V): N","description":"trees.base.AbstractTree.insert","location":"trees-6/trees.base/-abstract-tree/insert.html","searchKeys":["insert","abstract override fun insert(key: K, value: V): N","trees.base.AbstractTree.insert"]},{"name":"abstract val key: K","description":"trees.base.Node.key","location":"trees-6/trees.base/-node/key.html","searchKeys":["key","abstract val key: K","trees.base.Node.key"]},{"name":"abstract val value: V","description":"trees.base.Node.value","location":"trees-6/trees.base/-node/value.html","searchKeys":["value","abstract val value: V","trees.base.Node.value"]},{"name":"abstract var left: N?","description":"trees.base.Node.left","location":"trees-6/trees.base/-node/left.html","searchKeys":["left","abstract var left: N?","trees.base.Node.left"]},{"name":"abstract var right: N?","description":"trees.base.Node.right","location":"trees-6/trees.base/-node/right.html","searchKeys":["right","abstract var right: N?","trees.base.Node.right"]},{"name":"class AVLNode<K : Comparable<K>, V>(var key: K, var value: V, var left: AVLNode<K, V>? = null, var right: AVLNode<K, V>? = null, var height: Int = 1) : Node<K, V, AVLNode<K, V>> ","description":"trees.avl.AVLNode","location":"trees-6/trees.avl/-a-v-l-node/index.html","searchKeys":["AVLNode","class AVLNode<K : Comparable<K>, V>(var key: K, var value: V, var left: AVLNode<K, V>? = null, var right: AVLNode<K, V>? = null, var height: Int = 1) : Node<K, V, AVLNode<K, V>> ","trees.avl.AVLNode"]},{"name":"class AVLTree<K : Comparable<K>, V : Any> : AbstractTree<K, V, AVLNode<K, V>> ","description":"trees.avl.AVLTree","location":"trees-6/trees.avl/-a-v-l-tree/index.html","searchKeys":["AVLTree","class AVLTree<K : Comparable<K>, V : Any> : AbstractTree<K, V, AVLNode<K, V>> ","trees.avl.AVLTree"]},{"name":"class BinaryNode<K : Comparable<K>, V>(val key: K, val value: V, var left: BinaryNode<K, V>? = null, var right: BinaryNode<K, V>? = null) : Node<K, V, BinaryNode<K, V>> ","description":"trees.binary.BinaryNode","location":"trees-6/trees.binary/-binary-node/index.html","searchKeys":["BinaryNode","class BinaryNode<K : Comparable<K>, V>(val key: K, val value: V, var left: BinaryNode<K, V>? = null, var right: BinaryNode<K, V>? = null) : Node<K, V, BinaryNode<K, V>> ","trees.binary.BinaryNode"]},{"name":"class BinaryTree","description":"trees.binary.BinaryTree","location":"trees-6/trees.binary/-binary-tree/index.html","searchKeys":["BinaryTree","class BinaryTree","trees.binary.BinaryTree"]},{"name":"class RedBlackNode<K : Comparable<K>, V>(val key: K, val value: V, var parent: RedBlackNode<K, V>? = null, var left: RedBlackNode<K, V>? = null, var right: RedBlackNode<K, V>? = null, var color: Colors = Colors.RED) : Node<K, V, RedBlackNode<K, V>> ","description":"trees.redblack.RedBlackNode","location":"trees-6/trees.redblack/-red-black-node/index.html","searchKeys":["RedBlackNode","class RedBlackNode<K : Comparable<K>, V>(val key: K, val value: V, var parent: RedBlackNode<K, V>? = null, var left: RedBlackNode<K, V>? = null, var right: RedBlackNode<K, V>? = null, var color: Colors = Colors.RED) : Node<K, V, RedBlackNode<K, V>> ","trees.redblack.RedBlackNode"]},{"name":"class RedBlackTree<K : Comparable<K>, V : Any> : AbstractTree<K, V, RedBlackNode<K, V>> ","description":"trees.redblack.RedBlackTree","location":"trees-6/trees.redblack/-red-black-tree/index.html","searchKeys":["RedBlackTree","class RedBlackTree<K : Comparable<K>, V : Any> : AbstractTree<K, V, RedBlackNode<K, V>> ","trees.redblack.RedBlackTree"]},{"name":"constructor()","description":"trees.avl.AVLTree.AVLTree","location":"trees-6/trees.avl/-a-v-l-tree/-a-v-l-tree.html","searchKeys":["AVLTree","constructor()","trees.avl.AVLTree.AVLTree"]},{"name":"constructor()","description":"trees.base.AbstractTree.AbstractTree","location":"trees-6/trees.base/-abstract-tree/-abstract-tree.html","searchKeys":["AbstractTree","constructor()","trees.base.AbstractTree.AbstractTree"]},{"name":"constructor()","description":"trees.binary.BinaryTree.BinaryTree","location":"trees-6/trees.binary/-binary-tree/-binary-tree.html","searchKeys":["BinaryTree","constructor()","trees.binary.BinaryTree.BinaryTree"]},{"name":"constructor()","description":"trees.redblack.RedBlackTree.RedBlackTree","location":"trees-6/trees.redblack/-red-black-tree/-red-black-tree.html","searchKeys":["RedBlackTree","constructor()","trees.redblack.RedBlackTree.RedBlackTree"]},{"name":"constructor(key: K, value: V, left: AVLNode<K, V>? = null, right: AVLNode<K, V>? = null, height: Int = 1)","description":"trees.avl.AVLNode.AVLNode","location":"trees-6/trees.avl/-a-v-l-node/-a-v-l-node.html","searchKeys":["AVLNode","constructor(key: K, value: V, left: AVLNode<K, V>? = null, right: AVLNode<K, V>? = null, height: Int = 1)","trees.avl.AVLNode.AVLNode"]},{"name":"constructor(key: K, value: V, left: BinaryNode<K, V>? = null, right: BinaryNode<K, V>? = null)","description":"trees.binary.BinaryNode.BinaryNode","location":"trees-6/trees.binary/-binary-node/-binary-node.html","searchKeys":["BinaryNode","constructor(key: K, value: V, left: BinaryNode<K, V>? = null, right: BinaryNode<K, V>? = null)","trees.binary.BinaryNode.BinaryNode"]},{"name":"constructor(key: K, value: V, parent: RedBlackNode<K, V>? = null, left: RedBlackNode<K, V>? = null, right: RedBlackNode<K, V>? = null, color: Colors = Colors.RED)","description":"trees.redblack.RedBlackNode.RedBlackNode","location":"trees-6/trees.redblack/-red-black-node/-red-black-node.html","searchKeys":["RedBlackNode","constructor(key: K, value: V, parent: RedBlackNode<K, V>? = null, left: RedBlackNode<K, V>? = null, right: RedBlackNode<K, V>? = null, color: Colors = Colors.RED)","trees.redblack.RedBlackNode.RedBlackNode"]},{"name":"enum Colors : Enum<Colors> ","description":"trees.redblack.Colors","location":"trees-6/trees.redblack/-colors/index.html","searchKeys":["Colors","enum Colors : Enum<Colors> ","trees.redblack.Colors"]},{"name":"fun contains(value: V): Boolean","description":"trees.base.AbstractTree.contains","location":"trees-6/trees.base/-abstract-tree/contains.html","searchKeys":["contains","fun contains(value: V): Boolean","trees.base.AbstractTree.contains"]},{"name":"fun height(): Int","description":"trees.avl.AVLTree.height","location":"trees-6/trees.avl/-a-v-l-tree/height.html","searchKeys":["height","fun height(): Int","trees.avl.AVLTree.height"]},{"name":"fun max(): K?","description":"trees.base.AbstractTree.max","location":"trees-6/trees.base/-abstract-tree/max.html","searchKeys":["max","fun max(): K?","trees.base.AbstractTree.max"]},{"name":"fun min(): K?","description":"trees.base.AbstractTree.min","location":"trees-6/trees.base/-abstract-tree/min.html","searchKeys":["min","fun min(): K?","trees.base.AbstractTree.min"]},{"name":"fun range(start: K, end: K): List<V>?","description":"trees.base.AbstractTree.range","location":"trees-6/trees.base/-abstract-tree/range.html","searchKeys":["range","fun range(start: K, end: K): List<V>?","trees.base.AbstractTree.range"]},{"name":"fun sampleClear()","description":"samples.avl.sampleClear","location":"trees-6/samples.avl/sample-clear.html","searchKeys":["sampleClear","fun sampleClear()","samples.avl.sampleClear"]},{"name":"fun sampleContains()","description":"samples.avl.sampleContains","location":"trees-6/samples.avl/sample-contains.html","searchKeys":["sampleContains","fun sampleContains()","samples.avl.sampleContains"]},{"name":"fun sampleDelete()","description":"samples.avl.sampleDelete","location":"trees-6/samples.avl/sample-delete.html","searchKeys":["sampleDelete","fun sampleDelete()","samples.avl.sampleDelete"]},{"name":"fun sampleHeight()","description":"samples.avl.sampleHeight","location":"trees-6/samples.avl/sample-height.html","searchKeys":["sampleHeight","fun sampleHeight()","samples.avl.sampleHeight"]},{"name":"fun sampleInOrder()","description":"samples.avl.sampleInOrder","location":"trees-6/samples.avl/sample-in-order.html","searchKeys":["sampleInOrder","fun sampleInOrder()","samples.avl.sampleInOrder"]},{"name":"fun sampleInsert()","description":"samples.avl.sampleInsert","location":"trees-6/samples.avl/sample-insert.html","searchKeys":["sampleInsert","fun sampleInsert()","samples.avl.sampleInsert"]},{"name":"fun sampleIsEmpty()","description":"samples.avl.sampleIsEmpty","location":"trees-6/samples.avl/sample-is-empty.html","searchKeys":["sampleIsEmpty","fun sampleIsEmpty()","samples.avl.sampleIsEmpty"]},{"name":"fun sampleMax()","description":"samples.avl.sampleMax","location":"trees-6/samples.avl/sample-max.html","searchKeys":["sampleMax","fun sampleMax()","samples.avl.sampleMax"]},{"name":"fun sampleMin()","description":"samples.avl.sampleMin","location":"trees-6/samples.avl/sample-min.html","searchKeys":["sampleMin","fun sampleMin()","samples.avl.sampleMin"]},{"name":"fun sampleRange()","description":"samples.avl.sampleRange","location":"trees-6/samples.avl/sample-range.html","searchKeys":["sampleRange","fun sampleRange()","samples.avl.sampleRange"]},{"name":"fun sampleSearch()","description":"samples.avl.sampleSearch","location":"trees-6/samples.avl/sample-search.html","searchKeys":["sampleSearch","fun sampleSearch()","samples.avl.sampleSearch"]},{"name":"fun sampleSize()","description":"samples.avl.sampleSize","location":"trees-6/samples.avl/sample-size.html","searchKeys":["sampleSize","fun sampleSize()","samples.avl.sampleSize"]},{"name":"fun valueOf(value: String): Colors","description":"trees.redblack.Colors.valueOf","location":"trees-6/trees.redblack/-colors/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Colors","trees.redblack.Colors.valueOf"]},{"name":"fun values(): Array<Colors>","description":"trees.redblack.Colors.values","location":"trees-6/trees.redblack/-colors/values.html","searchKeys":["values","fun values(): Array<Colors>","trees.redblack.Colors.values"]},{"name":"interface Node<K, V, N : Node<K, V, N>>","description":"trees.base.Node","location":"trees-6/trees.base/-node/index.html","searchKeys":["Node","interface Node<K, V, N : Node<K, V, N>>","trees.base.Node"]},{"name":"interface Tree<K : Comparable<K>, V, N : Node<K, V, N>>","description":"trees.base.Tree","location":"trees-6/trees.base/-tree/index.html","searchKeys":["Tree","interface Tree<K : Comparable<K>, V, N : Node<K, V, N>>","trees.base.Tree"]},{"name":"open override fun clear()","description":"trees.base.AbstractTree.clear","location":"trees-6/trees.base/-abstract-tree/clear.html","searchKeys":["clear","open override fun clear()","trees.base.AbstractTree.clear"]},{"name":"open override fun delete(key: K): Boolean","description":"trees.avl.AVLTree.delete","location":"trees-6/trees.avl/-a-v-l-tree/delete.html","searchKeys":["delete","open override fun delete(key: K): Boolean","trees.avl.AVLTree.delete"]},{"name":"open override fun delete(key: K): Boolean","description":"trees.redblack.RedBlackTree.delete","location":"trees-6/trees.redblack/-red-black-tree/delete.html","searchKeys":["delete","open override fun delete(key: K): Boolean","trees.redblack.RedBlackTree.delete"]},{"name":"open override fun inOrder(): List<Node<K, V, N>>","description":"trees.base.AbstractTree.inOrder","location":"trees-6/trees.base/-abstract-tree/in-order.html","searchKeys":["inOrder","open override fun inOrder(): List<Node<K, V, N>>","trees.base.AbstractTree.inOrder"]},{"name":"open override fun insert(key: K, value: V): AVLNode<K, V>","description":"trees.avl.AVLTree.insert","location":"trees-6/trees.avl/-a-v-l-tree/insert.html","searchKeys":["insert","open override fun insert(key: K, value: V): AVLNode<K, V>","trees.avl.AVLTree.insert"]},{"name":"open override fun insert(key: K, value: V): RedBlackNode<K, V>","description":"trees.redblack.RedBlackTree.insert","location":"trees-6/trees.redblack/-red-black-tree/insert.html","searchKeys":["insert","open override fun insert(key: K, value: V): RedBlackNode<K, V>","trees.redblack.RedBlackTree.insert"]},{"name":"open override fun isEmpty(): Boolean","description":"trees.base.AbstractTree.isEmpty","location":"trees-6/trees.base/-abstract-tree/is-empty.html","searchKeys":["isEmpty","open override fun isEmpty(): Boolean","trees.base.AbstractTree.isEmpty"]},{"name":"open override fun search(key: K): V?","description":"trees.base.AbstractTree.search","location":"trees-6/trees.base/-abstract-tree/search.html","searchKeys":["search","open override fun search(key: K): V?","trees.base.AbstractTree.search"]},{"name":"open override fun size(): Int","description":"trees.base.AbstractTree.size","location":"trees-6/trees.base/-abstract-tree/size.html","searchKeys":["size","open override fun size(): Int","trees.base.AbstractTree.size"]},{"name":"open override val key: K","description":"trees.binary.BinaryNode.key","location":"trees-6/trees.binary/-binary-node/key.html","searchKeys":["key","open override val key: K","trees.binary.BinaryNode.key"]},{"name":"open override val key: K","description":"trees.redblack.RedBlackNode.key","location":"trees-6/trees.redblack/-red-black-node/key.html","searchKeys":["key","open override val key: K","trees.redblack.RedBlackNode.key"]},{"name":"open override val value: V","description":"trees.binary.BinaryNode.value","location":"trees-6/trees.binary/-binary-node/value.html","searchKeys":["value","open override val value: V","trees.binary.BinaryNode.value"]},{"name":"open override val value: V","description":"trees.redblack.RedBlackNode.value","location":"trees-6/trees.redblack/-red-black-node/value.html","searchKeys":["value","open override val value: V","trees.redblack.RedBlackNode.value"]},{"name":"open override var key: K","description":"trees.avl.AVLNode.key","location":"trees-6/trees.avl/-a-v-l-node/key.html","searchKeys":["key","open override var key: K","trees.avl.AVLNode.key"]},{"name":"open override var left: AVLNode<K, V>?","description":"trees.avl.AVLNode.left","location":"trees-6/trees.avl/-a-v-l-node/left.html","searchKeys":["left","open override var left: AVLNode<K, V>?","trees.avl.AVLNode.left"]},{"name":"open override var left: BinaryNode<K, V>?","description":"trees.binary.BinaryNode.left","location":"trees-6/trees.binary/-binary-node/left.html","searchKeys":["left","open override var left: BinaryNode<K, V>?","trees.binary.BinaryNode.left"]},{"name":"open override var left: RedBlackNode<K, V>?","description":"trees.redblack.RedBlackNode.left","location":"trees-6/trees.redblack/-red-black-node/left.html","searchKeys":["left","open override var left: RedBlackNode<K, V>?","trees.redblack.RedBlackNode.left"]},{"name":"open override var right: AVLNode<K, V>?","description":"trees.avl.AVLNode.right","location":"trees-6/trees.avl/-a-v-l-node/right.html","searchKeys":["right","open override var right: AVLNode<K, V>?","trees.avl.AVLNode.right"]},{"name":"open override var right: BinaryNode<K, V>?","description":"trees.binary.BinaryNode.right","location":"trees-6/trees.binary/-binary-node/right.html","searchKeys":["right","open override var right: BinaryNode<K, V>?","trees.binary.BinaryNode.right"]},{"name":"open override var right: RedBlackNode<K, V>?","description":"trees.redblack.RedBlackNode.right","location":"trees-6/trees.redblack/-red-black-node/right.html","searchKeys":["right","open override var right: RedBlackNode<K, V>?","trees.redblack.RedBlackNode.right"]},{"name":"open override var value: V","description":"trees.avl.AVLNode.value","location":"trees-6/trees.avl/-a-v-l-node/value.html","searchKeys":["value","open override var value: V","trees.avl.AVLNode.value"]},{"name":"val entries: EnumEntries<Colors>","description":"trees.redblack.Colors.entries","location":"trees-6/trees.redblack/-colors/entries.html","searchKeys":["entries","val entries: EnumEntries<Colors>","trees.redblack.Colors.entries"]},{"name":"var color: Colors","description":"trees.redblack.RedBlackNode.color","location":"trees-6/trees.redblack/-red-black-node/color.html","searchKeys":["color","var color: Colors","trees.redblack.RedBlackNode.color"]},{"name":"var height: Int","description":"trees.avl.AVLNode.height","location":"trees-6/trees.avl/-a-v-l-node/height.html","searchKeys":["height","var height: Int","trees.avl.AVLNode.height"]},{"name":"var parent: RedBlackNode<K, V>?","description":"trees.redblack.RedBlackNode.parent","location":"trees-6/trees.redblack/-red-black-node/parent.html","searchKeys":["parent","var parent: RedBlackNode<K, V>?","trees.redblack.RedBlackNode.parent"]}]
